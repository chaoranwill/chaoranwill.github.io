---
layout:     post
title:      "Web basis summary"
subtitle:   "basic of front-end development"
date:       2018-02-27 19:55:00
author:     "Chaoran"
header-img: "img/post-bg-webbasic.jpg"
noToc:      true
tags:
    - 前端开发
---

> “To be is to be perceived. ”

* 目录
{:toc #toc}

## 1. JavaScript
#### 1.1. 基础语法
> 包括：变量声明、数据类型、函数、控制语句、内置对象等
##### 1.1.1. 变量声明
ES5：
```js
var         //普通变量 
function    //函数
```
ES6新增:
```js
let         //普通变量
const       //静态变量
import      //模块
class       //类
```
##### 1.1.2. 数据类型
###### 类型介绍
ES5:
`String、Number、Boolean、Null、Undefined、Object`
ES6增:
`Symbol`
**其中，object为引用，其他为基本类型**
* 基本类型
    占据空间固定，是简单的数据段，将其存储在**栈**(stack)中(按值访问)   *便于提升变量查询速度*
    为了便于操作这类数据，ECMAScript提供了 3 个 基本包装类型 ：Boolean、Number 和 String
    - 基本包装类型
        一种特殊的引用类型，每当读取一个基本类型值的时候，JS内部就会创建一个对应的包装对象，从而可以调用一些方法来操作这些数据
* 引用类型
    - 由于其值的大小会改变，所以不能将其存放在栈中，否则会降低变量查询速度
    - 将其存储在**堆**(heap)中，存储在变量处的值是一个指针，指向存储对象的内存处(按址访问)
    - 可以为其添加、改变和删除属性和方法；但基本类型不可以添加属性和方法

###### 类型判断
* 原始类型
    - typeof
* 引用类型
    - isinstanceof -- 判断已知对象
    - constructor -- 根据对象的constructor判断
    *constructor本来是原型对象上的属性，指向构造函数。但是根据实例对象寻找属性的顺序，若实例对象上没有实例属性或方法时，就去原型链上寻找，因此，实例对象也是能使用constructor属性的*
    - Object.prototype.toString.call 
    - $.type() -- 万能判断
    ```js
    var a = new Array();
    console.log(a instanceof Array) // a是否Array的实例  true
    console.log(a.constructor == Array)  //  a实例所对应的构造函数是否为Array  true

    // constructor属性是可以被修改的，会导致检测出的结果不正确
    function Dog(){
    
    }
    function Cat(){
    
    }
    Cat.prototype = new Dog();
    var m= new Cat();
    console.log(m.constructor==Cat); // false
    console.log(John.constructor==Person); // true
    // instanceof 对于直接或间接引用都是true
    console.log(m instanceof Cat); // true
    console.log(John instanceof Person); // true

    //Object.prototype.toString.call 
    function a() { };
 
    var toString = Object.prototype.toString;
    console.log(toString.call(new Date) === '[object Date]');   //true
    console.log(toString.call(new String) ==='[object String]');//true
    console.log(toString.call(a) ==='[object Function]');       //true

    //$.type
    jQuery.type( undefined ) === "undefined"          // true
    jQuery.type() === "undefined"                     // true
    jQuery.type( null ) === "null"                    // true
    jQuery.type( true ) === "boolean"                 // true
    ```
###### 函数
* 普通函数 -- 直接调用
* 构造函数 -- new 创建对象
* 对象方法 -- 对象调用

###### JS 内置对象
* window
    - 全局对象，主要描述浏览器窗口相关的属性和状态
* Date
* Array
* JSON
    - 主要用于对象的序列化和反序列化
    - 实现对象的深拷贝
* RegExp
深拷贝与浅拷贝


